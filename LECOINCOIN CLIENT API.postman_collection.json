{
	"info": {
		"_postman_id": "740c7c72-f6a6-43af-8346-69ad7bb0754b",
		"name": "LECOINCOIN CLIENT API",
		"description": "API pour la gestion des utilisateurs et des annonces de l'application grails Lecoincoin. Elle offre des endpoints qui permettent de faire des opérations CRUD sur les utilisateurs et les annonces.\n\nLes utilisateurs se caractérisent par les propriétés suivantes :\n\n> Les propriétés marquée de \\* sont obligatoires à la création.\n\n| **Propriétés** | **Description** | **type** |\n| --- | --- | --- |\n| id | Identifiant | Integer |\n| username\\* | Nom utilisateur | String |\n| nom | Nom | String |\n| prenoms | Prénoms | String |\n| password\\* | Mot de passe | String |\n| photo | Lien de la photo | String |\n| authorities | Liste des rôles | List |\n\nLes annonces se caractérisent par les propriétés suivantes :\n\n| **Propriétés** | **Description** | **type** |\n| --- | --- | --- |\n| id | Identifiant | Integer |\n| title\\* | Titre de l'annonce | String |\n| description\\* | Description | String |\n| Price\\* | Prix | Integer |\n| author\\* | Propriétaire de l'annonce | User |\n| illustrations | Liste des illustrations | List |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13312778"
	},
	"item": [
		{
			"name": "USER",
			"item": [
				{
					"name": "GET USER",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/user/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"5"
							]
						},
						"description": "Récupère les infos d'un utilisateur en fonction de son id\n\n`GET` /api/user/{id}\n\nType de reponses: JSON de l'utilisateur\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 200 | Utilisateur retourné |\n| 404 | Utilisateur introuvabe |\n| 400 | Requête incorrecte |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/user/20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"20"
							]
						},
						"description": "Supprimer un utilisateur à partir de son id\n\n`DELETE` /api/user/{id}\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 201 | Utilisateur supprimé |\n| 404 | Utilisateur introuvabe |\n| 400 | Requête incorrecte |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "GET USERS",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users"
							]
						},
						"description": "Récupère les infos de tous les utilisateurs.\n\n`GET` /api/users\n\nType de reponses: JSON de l'utilisateur\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 200 | Utilisateur retourné |\n| 404 | Utilisateur introuvabe |\n| 400 | Requête incorrecte |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"admin\",\r\n    \"nom\":\"Benoit\",\r\n    \"prenoms\":\"Linsay\",\r\n    \"username\":\"lili3\",\r\n    \"photo\":\"avatar.png\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								""
							]
						},
						"description": "Permet de créer un nouveau utilisateur.\n\n`POST` /api/users\n\nType de reponses: JSON de l'utilisateur\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 201 | Utilisateur créé |\n| 400 | Requête incorrecte, Données invalide, Erreur d'enregistrement, Champ obligatoire manquant |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\":\"Dje Bi\",\r\n    \"prenoms\":\"Mointi\",\r\n    \"username\":\"user5005\", // Pour verifier le bon fonctionnement changer cette valeur en cas de 400\r\n    \"photo\":\"avatar.png\",\r\n    \"password\":\"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"6"
							]
						},
						"description": "Permet de mettre à jour massivement un utilisateur.\n\n`PUT` /api/user/{id}\n\nType de reponses: JSON de l'utilisateur\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 201 | Utilisateur mis à jour |\n| 400 | Requête incorrecte, Données invalide, Erreur d'enregistrement, Champ obligatoire manquant |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "PARTIAL UPDATE USER",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\":\"Dje Lou\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/user/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"6"
							]
						},
						"description": "Permet de mettre à jour des champs d'un un utilisateur.\n\n`PATCH` /api/user/{id}\n\nType de reponses: JSON de l'utilisateur\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 201 | Utilisateur mis à jour |\n| 400 | Requête incorrecte, Données invalide, Erreur d'enregistrement, Champ obligatoire manquant |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				}
			],
			"description": "Contient tous les endpoints pour les gestions des utilisateurs. Exigences l'usage d'un Bearer Token.\n\n- Récupération de tous les éléments\n- Récupération par id\n- Suppression par id\n- Création\n- Mise à jour massive\n- Mise à jour partielle"
		},
		{
			"name": "ANNONCE",
			"item": [
				{
					"name": "GET ANNONCE",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/annonce/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"annonce",
								"6"
							]
						},
						"description": "Récupère les infos d'une annonce en fonction de son id\n\n`GET` /api/annonce/{id}\n\nType de reponses: JSON de l'annonce\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 200 | Annonce retourné |\n| 404 | Annonce introuvabe |\n| 400 | Requête incorrecte |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "DELETE ANNONCE",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/annonce/9",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"annonce",
								"9"
							]
						},
						"description": "Supprimer une annonce à partir de son id\n\n`DELETE` /api/annonce/{id}\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 200 | Annonce supprimé |\n| 404 | Annonce introuvabe |\n| 400 | Requête incorrecte |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "GET ANNONCES",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/annonces",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"annonces"
							]
						},
						"description": "Récupère les infos de toutes les annonces.\n\n`GET` /api/annonces\n\nType de reponses: JSON de l'annonce\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 200 | Annonce retourné |\n| 404 | Annonce introuvabe |\n| 400 | Requête incorrecte |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "CREATE ANNONCE",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"Le guide de developpeur\",\r\n    \"price\": 500,\r\n    \"isActive\":true,\r\n    \"description\":\"Pour les débutant en informatique\",\r\n    \"author\":{\r\n        \"id\": 4  // Changer cette valeur en cas de 400 (entre 1 et 100). Il se peut que l'utilisateur est été supprimé ou introuvable.\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/annonces/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"annonces",
								""
							]
						},
						"description": "Permet de créer une nouvelle annonce.\n\n`POST` /api/annonces\n\nType de reponses: JSON de l'annonce\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 201 | Annonce créé |\n| 400 | Requête incorrecte, Données invalide, Erreur d'enregistrement, Champ obligatoire manquant |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "UPDATE ANNONCE",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"Le guide de developpeur pro\",\r\n    \"price\": 1500,\r\n    \"isActive\":true,\r\n    \"description\":\"Pour les expert en informatique\",\r\n    \"author\":{\r\n        \"id\": 7 // Changer cette valeur en cas de 400 (entre 1 et 100). Il se peut que l'utilisateur est été supprimé ou introuvable.\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/annonce/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"annonce",
								"6"
							]
						},
						"description": "Permet de mettre à jour massivement une annonce.\n\n`PUT` /api/annonce/{id}\n\nType de reponses: JSON de l'annonce\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 201 | Annonce mise à jour |\n| 400 | Requête incorrecte, Données invalide, Erreur d'enregistrement, Champ obligatoire manquant |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				},
				{
					"name": "PARTIAL UPDATE ANNONCE",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 800,\r\n    \"author\":{\r\n        \"id\": 4 // Changer cette valeur en cas de 400 (entre 1 et 100). Il se peut que l'utilisateur est été supprimé ou introuvable.\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/annonce/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"annonce",
								"6"
							]
						},
						"description": "Permet de mettre à jour des champs d'une annonce.\n\n`PATCH` /api/annonce/{id}\n\nType de reponses: JSON de l'annonce\n\nCode de reponses:\n\n| **Code** | **Commentaire** |\n| --- | --- |\n| 201 | Annonce mise à jour |\n| 400 | Requête incorrecte, Données invalide, Erreur d'enregistrement, Champ obligatoire manquant |\n| 403 ou 401 | Accès non autorisé, Token invalide ou expiré |\n| 500 | Erreur serveur |"
					},
					"response": []
				}
			],
			"description": "Contient tous les endpoints pour les gestions des annonces. Exigences l'usage d'un Bearer Token.\n\n- Récupération de tous les éléments\n- Récupération par id\n- Suppression par id\n- Création\n- Mise à jour massive\n- Mise à jour partielle"
		},
		{
			"name": "LOGIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var access_token = jsonData.access_token\r",
							"pm.globals.set(\"access_token\", access_token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"admin\",\r\n    \"password\":\"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"login"
					]
				},
				"description": "Permet de récupérer l'access_token pour dialoguer avec l'api."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}